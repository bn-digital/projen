import {  BrandNewProject,  BrandNewProjectOptions,  defaultReactOptions,  defaultStrapiOptions,  ReactOptions,  ReactProject,  StrapiOptions,  StrapiProject,} from ".."import { GraphqlDeps } from "../../components/graphql"import { defaultLinterOptions } from "../../components/ide"export interface FullStackProjectOptions extends BrandNewProjectOptions {  readonly dockerCompose?: boolean  readonly react?: ReactOptions  readonly strapi?: StrapiOptions}/** * @pjid full-stack */export class FullStackProject extends BrandNewProject {  readonly frontend: BrandNewProject | undefined  readonly backend: BrandNewProject | undefined  constructor(options: FullStackProjectOptions) {    const {      linters = defaultLinterOptions,      react = defaultReactOptions,      strapi = defaultStrapiOptions,      outdir,      deps = [],      devDeps = ["@bn-digital/typescript-config", "ts-node", "projen", "@types/node", "typescript"],      ...initialOptions    } = BrandNewProject._withDefaults(options)    super({      ...initialOptions,      docker: {},      deps,      outdir,      devDeps,      linters,      helm: { helmfile: true, chart: false },    })    if (react) {      this.frontend = new ReactProject({        ...initialOptions,        parent: this,        name: "frontend",        linters: undefined,        react: { ...defaultReactOptions, ...react },        graphql: { type: GraphqlDeps.APOLLO_CLIENT, codegen: true },      })    }    if (strapi) {      this.backend = new StrapiProject({        ...initialOptions,        parent: this,        linters: undefined,        name: "backend",        strapi: { ...defaultStrapiOptions, ...strapi },      })    }  }  preSynthesize() {    this.packageJson?.addOverride("scripts.start", "yarn workspaces foreach --exclude=root run start")    this.packageJson?.addOverride("scripts.build", "yarn workspaces foreach --exclude=root run build")    super.preSynthesize()  }}