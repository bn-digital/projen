import {  BrandNewProject,  BrandNewProjectOptions,  ReactOptions,  ReactProject,  StrapiOptions,  StrapiProject,  defaultReactOptions,  defaultStrapiOptions,} from ".."export interface FullStackProjectOptions extends BrandNewProjectOptions {  readonly dockerCompose?: boolean  readonly react?: ReactOptions  readonly strapi?: StrapiOptions}/** * @pjid full-stack */export class FullStackProject extends BrandNewProject {  readonly frontend: BrandNewProject | undefined  readonly backend: BrandNewProject | undefined  constructor(options: FullStackProjectOptions) {    const {      react = defaultReactOptions,      strapi = defaultStrapiOptions,      linters = { eslint: true, stylelint: true, prettier: true },      ide = { editorconfig: true },      graphql = { config: true },      docker = { image: "dcr.bndigital.dev/bndigital/yarn", tag: "3.0.0" },      ...initialOptions    } = options    options = BrandNewProject._withDefaults({ ...initialOptions, react, strapi })    super({      docker,      linters,      ide,      graphql,      ...options,    })    if (react) {      this.frontend = new ReactProject({        ...options,        parent: this,        name: "frontend",        outdir: "packages/frontend",        devDeps: ["@bn-digital/typescript-config"],        react: { ...defaultReactOptions, ...react },        graphql: { codegen: true },      })    }    if (strapi) {      this.backend = new StrapiProject({        ...options,        parent: this,        name: "backend",        outdir: "packages/backend",        strapi: { ...defaultStrapiOptions, ...strapi },      })    }  }  preSynthesize() {    this.tryFindObjectFile("package.json")?.addOverride(      "scripts.start",      "yarn workspaces foreach --exclude=root run start"    )    this.tryFindObjectFile("package.json")?.addOverride(      "scripts.build",      "yarn workspaces foreach --exclude=root run build"    )    super.preSynthesize()  }  postSynthesize() {    super.postSynthesize()  }}