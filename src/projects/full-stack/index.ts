import { javascript } from "projen"import { BrandNewProject,BrandNewProjectOptions,ReactOptions,ReactProject,StrapiOptions,StrapiProject } from ".."export interface FullStackProjectOptions extends BrandNewProjectOptions {  readonly dockerCompose?: boolean  readonly react?: ReactOptions  readonly strapi?: StrapiOptions}/** * @pjid full-stack */export class FullStackProject extends BrandNewProject {  constructor(options: FullStackProjectOptions) {    const {      react = {},      strapi = {},      linters = {eslint: true, stylelint: true, prettier: true},      ide = {editorconfig: true},      ...initialOptions    } = options    const commonOptions = BrandNewProject._withDefaults(initialOptions)    super({      ...commonOptions,      linters,      ide,      graphql: {config: true},      packageManager: javascript.NodePackageManager.YARN2,    })    if (react) {      new ReactProject({        ...commonOptions,        parent: this,        name: "website",        outdir: "packages/website",        react,        graphql: {codegen: true},      })    }    if (strapi) {      new StrapiProject({        ...commonOptions,        parent: this,        name: "cms",        outdir: "packages/cms",        strapi,      })    }  }  preSynthesize() {    this.tryFindObjectFile("package.json")?.addOverride(      "scripts.start",      "yarn workspaces foreach --exclude=root run start"    )    this.tryFindObjectFile("package.json")?.addOverride(      "scripts.build",      "yarn workspaces foreach --exclude=root run build"    )    super.preSynthesize()  }  postSynthesize() {    super.postSynthesize()  }}