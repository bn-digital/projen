import { createWriteStream, existsSync } from "fs"import { get } from "https"import { resolve } from "path"import { parse } from "url"import { Project, SampleFile, SampleFileOptions } from "projen"const defaultBaseUrl = "https://raw.githubusercontent.com/bn-digital/project-templates/latest/" as constexport interface RemoteSourceFileOptions extends Required<Pick<SampleFileOptions, "sourcePath">> {  readonly baseUrl?: string}export class RemoteSourceFile extends SampleFile {  readonly source: URL  readonly destination: string  constructor(project: Project, filePath: string, options: RemoteSourceFileOptions) {    const url = new URL(parse((options.baseUrl ?? defaultBaseUrl).concat(options.sourcePath)).href)    super(project, filePath, { contents: `source: ${url.href}` })    this.source = url    this.destination = resolve(process.cwd(), project.outdir, filePath)  }  postSynthesize() {    this._synthesizeContent().finally(() => super.postSynthesize())  }  /**   * @internal   */  private async _synthesizeContent() {    return get(this.source, response => {      response.statusCode === 200 && existsSync(this.destination) && response.pipe(createWriteStream(this.destination))    })  }}